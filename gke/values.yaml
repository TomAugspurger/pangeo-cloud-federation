pangeo:
  jupyterhub:
    hub:
      services:
        dask-gateway:
          url: "http://traefik-staging-dask-gateway.metrics"
      extraConfig:
        noAuthMetrics: |
          c.JupyterHub.authenticate_prometheus = False
      service:
        annotations:
          prometheus.io/scrape: 'true'
          prometheus.io/path: '/hub/metrics'

    auth:
      type: dummy
      dummy:
        password: "dask"
      whitelist:
        users:
          - a
      admin:
        users:
          - a
    singleuser:
      image:
        name: pangeo/base-notebook
        tag: 2020.06.07
      serviceAccountName: pangeo
      extraEnv:
        # The default worker image matches the singleuser image.
        DASK_GATEWAY__CLUSTER__OPTIONS__IMAGE: '{JUPYTER_IMAGE_SPEC}'
        DASK_GATEWAY__ADDRESS: "http://34.67.241.223/services/dask-gateway/"
        DASK_GATEWAY__PROXY_ADDRESS: "gateway://traefik-staging-dask-gateway.metrics:80"

      cpu:
        limit: 0.5
        guarantee: 0.5
      memory:
        limit: 1G
        guarantee: 1G

    scheduling:
      userScheduler:
        enabled: true
      podPriority:
        enabled: true
      userPlaceholder:
        enabled: false
    
  dask-gateway:
    gateway:
      prefix: /services/dask-gateway
      proxy-address: gateway://traefik-staging-dask-gateway.staging:80
      auth:
        type: jupyterhub
      extraConfig:
        optionHandler: |
          from dask_gateway_server.options import Options, Integer, Float, String
          def cluster_options(user):
             def option_handler(options):
                 if ":" not in options.image:
                     raise ValueError("When specifying an image you must also provide a tag")
                 extra_annotations = {
                     "hub.jupyter.org/username": user.name,
                     "prometheus.io/scrape": "true"
                 }
                 extra_labels = {
                     "hub.jupyter.org/username": user.name,
                 }
                 return {
                     "worker_cores_limit": options.worker_cores,
                     "worker_cores": min(options.worker_cores / 2, 1),
                     "worker_memory": "%fG" % options.worker_memory,
                     "image": options.image,
                     "scheduler_extra_pod_annotations": extra_annotations,
                     "worker_extra_pod_annotations": extra_annotations,
                     "scheduler_extra_pod_labels": extra_labels,
                     "worker_extra_pod_labels": extra_labels,
                 }
             return Options(
                 Integer("worker_cores", 2, min=1, max=4, label="Worker Cores"),
                 Float("worker_memory", 4, min=1, max=8, label="Worker Memory (GiB)"),
                 String("image", default="pangeo/pangeo-notebook:latest", label="Image"),
                 handler=option_handler,
             )

          c.Backend.cluster_options = cluster_options

      backend:
        scheduler:
          cores:
            request: 0.5
            limit: 0.5
          memory:
            request: 1G
            limit: 1G

          extraPodConfig:
            serviceAccountName: pangeo
            tolerations:
              - key: "k8s.dask.org/dedicated"
                operator: "Equal"
                value: "scheduler"
                effect: "NoSchedule"
              - key: "k8s.dask.org_dedicated"
                operator: "Equal"
                value: "scheduler"
                effect: "NoSchedule"
        worker:
          cores:
            request: 0.5
            limit: 0.5
          memory:
            request: 1G
            limit: 1G

          extraContainerConfig:
            securityContext:
              runAsGroup: 1000
              runAsUser: 1000
          extraPodConfig:
            tolerations:
              - key: "k8s.dask.org/dedicated"
                operator: "Equal"
                value: "worker"
                effect: "NoSchedule"
              - key: "k8s.dask.org_dedicated"
                operator: "Equal"
                value: "worker"
                effect: "NoSchedule"
              - key: "cloud.google.com/gke-preemptible"
                operator: "Equal"
                value: "true"
                effect: "NoSchedule"
            serviceAccountName: pangeo
            automountServiceAccountToken: true
            securityContext:
              fsGroup: 1000

grafana:
  ingress:
    enabled: true
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: prometheus
          orgId: 1
          type: prometheus
          url: http://staging-prometheus-server
          access: proxy
          isDefault: true
